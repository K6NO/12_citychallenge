{"version":3,"sources":["app.module.js","app.config.js","navbar.module.js","auth.js","data.js","footer.directive.js","ChallengeController.js","ChallengesController.js","CurrentChallengeController.js","LoginController.js","LogoutController.js","NavbarController.js","ProfileController.js","SignupController.js"],"names":["cityChallengeApp","angular","module","run","$rootScope","$location","$route","authService","$on","event","next","getUserStatus","then","isLogin","isLoggedIn","savedLocation","url","path","console","log","config","$locationProvider","$routeProvider","$httpProvider","when","controller","controllerAs","templateUrl","otherwise","component","factory","$q","$timeout","$http","user","get","response","data","status","loggedInUser","getLoggedInUser","successCallback","errorCallback","login","email","password","deferred","defer","post","emailAddress","resolve","reject","catch","promise","logout","register","service","this","getChallenges","getChallenge","challengeId","addChallenge","challenge","updateChallenge","put","getCurrentChallenge","currentChallengeId","getCurrentChallengesForUser","addCurrentChallenge","currentChallenge","abandonCurrentChallenge","stepCompletedCurrentChallenge","steps","getUser","id","addUser","updateUser","getMessages","sendMessage","message","directive","restrict","replace","$scope","$filter","dataService","pageIdentifier","buttonFlag","split","userId","undefined","currentChallenges","some","state","_id","err","errors","error","startCurrentChallenge","description","stepNumber","challenges","pageIndicator","compare","a","b","createdAt","userMessages","messages","allMessages","partnerMessages","concat","sort","saveSteps","reload","newMessageText","currentChallengeMessages","removeError","push","isCollapsed","ranks","1","2","3","4","5","6","7","8","rank","level","selectedProfilePic","chooseProfilePic","clickedItem","profilePicUrl","target","attributes","src","value","photoUrl","fullName","userName"],"mappings":"AAAA,YAEA,IAAAA,kBAAAC,QAAAC,OAAA,oBAAA,UAAA,UAGAF,kBAAAG,KAAA,aAAA,YAAA,SAAA,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAH,EAAAI,IAAA,oBAAA,SAAAC,EAAAC,GACAH,EAAAI,gBAAAC,KAAA,WACAF,EAAAG,UAAAN,EAAAO,cACAV,EAAAW,cAAAV,EAAAW,MACAX,EAAAY,KAAA,WAEAC,QAAAC,IAAA,2CCVAlB,QAAAC,OAAA,oBAAAkB,QAAA,oBAAA,iBAAA,gBAAA,SAAAC,EAAAC,EAAAC,GAEAD,EAAAE,KAAA,gBACAC,WAAA,uBACAC,aAAA,KACAC,YAAA,yCACAd,SAAA,IACAW,KAAA,4BACAC,WAAA,sBACAC,aAAA,KACAC,YAAA,2CACAd,SAAA,IAEAW,KAAA,YACAC,WAAA,oBACAC,aAAA,KACAC,YAAA,kCACAd,SAAA,IAEAW,KAAA,2CACAC,WAAA,6BACAC,aAAA,KACAC,YAAA,4CACAd,SAAA,IAEAW,KAAA,UACAC,WAAA,kBACAC,aAAA,KACAC,YAAA,gCACAd,SAAA,IACAW,KAAA,WACAC,WAAA,mBACAC,aAAA,KACAb,SAAA,IACAW,KAAA,WACAC,WAAA,mBACAC,aAAA,KACAC,YAAA,iCACAd,SAAA,IACAe,UAAA,kBCvCA3B,QAAAC,OAAA,aAAA2B,UAAA,UACAF,YAAA,iCACAF,WAAA,qBCFAxB,QAAAC,OAAA,oBAAA4B,QAAA,eAAA,KAAA,WAAA,QAAA,SAAAC,EAAAC,EAAAC,GAIA,QAAAnB,KAEA,QAAAoB,EAOA,QAAAvB,KACA,MAAAsB,GAAAE,IAAA,kBAAAvB,KAAA,SAAAwB,IACA,IAAAA,EAAAC,KAAAC,OACAJ,GAAA,GAEAA,GAAA,EACAhB,QAAAC,IAAA,4BACAoB,EAAAH,EAAAC,KAAAH,KACAhB,QAAAC,IAAAoB,MAKA,QAAAC,GAAAC,EAAAC,GACAT,EAAAE,IAAA,kBAAAvB,KAAA6B,EAAAC,GAGA,QAAAC,GAAAC,EAAAC,GAGA,GAAAC,GAAAf,EAAAgB,OAsBA,OAnBAd,GAAAe,KAAA,eAAAC,aAAAL,EAAAC,SAAAA,IAEAjC,KAAA,SAAAwB,GACA,MAAAA,EAAAE,QACAJ,GAAA,EACAK,EAAAH,EAAAC,KACAS,EAAAI,YAEAhB,GAAA,EACAY,EAAAK,YAIAC,MAAA,SAAAf,GACAH,GAAA,EACAY,EAAAK,OAAAd,KAIAS,EAAAO,QAGA,QAAAC,KAGA,GAAAR,GAAAf,EAAAgB,OAiBA,OAdAd,GAAAE,IAAA,gBAEAvB,KAAA,WACAsB,GAAA,EACAK,EAAA,KACAO,EAAAI,YAGAE,MAAA,WACAlB,GAAA,EACAY,EAAAK,WAIAL,EAAAO,QAGA,QAAAE,GAAArB,GAGA,GAAAY,GAAAf,EAAAgB,OAmBA,OAhBAd,GAAAe,KAAA,eAAAd,GAEAtB,KAAA,SAAAwB,GACA,MAAAA,EAAAE,QAAAF,GACAG,EAAAH,EAAAC,KACAS,EAAAI,WAEAJ,EAAAK,WAIAC,MAAA,SAAAf,GACAS,EAAAK,OAAAd,KAIAS,EAAAO,QAtGA,GAAAnB,GAAA,KACAK,EAAA,IAwGA,QACAzB,WAAAA,EACAH,cAAAA,EACAgC,MAAAA,EACAW,OAAAA,EACAC,SAAAA,EACAf,gBAAAA,MChHA,WAIAvC,QAAAC,OAAA,oBAAAsD,QAAA,eAAA,QAAA,SAAAvB,GAKAwB,KAAAC,cAAA,SAAAjB,GACAR,EAAAE,IAAA,mBAAAvB,KAAA6B,IAIAgB,KAAAE,aAAA,SAAAC,EAAAnB,GACAR,EAAAE,IAAA,mBAAAyB,GAAAhD,KAAA6B,IAIAgB,KAAAI,aAAA,SAAAC,EAAArB,EAAAC,GACAT,EAAAe,KAAA,kBAAAc,GAAAlD,KAAA6B,EAAAC,IAIAe,KAAAM,gBAAA,SAAAH,EAAAE,EAAArB,EAAAC,GACAT,EAAA+B,IAAA,mBAAAJ,EAAAE,GAAAlD,KAAA6B,EAAAC,IAMAe,KAAAQ,oBAAA,SAAAC,EAAAzB,EAAAC,GACAT,EAAAE,IAAA,2BAAA+B,GAAAtD,KAAA6B,EAAAC,IAKAe,KAAAU,4BAAA,SAAA1B,EAAAC,GACAT,EAAAE,IAAA,iCAAAvB,KAAA6B,EAAAC,IAKAe,KAAAW,oBAAA,SAAAC,EAAA5B,EAAAC,GACAT,EAAAe,KAAA,2BAAAqB,GAAAzD,KAAA6B,EAAAC,IAKAe,KAAAa,wBAAA,SAAAJ,EAAAG,EAAA5B,EAAAC,GACAT,EAAA+B,IAAA,2BAAAE,EAAA,WAAAG,GAAAzD,KAAA6B,EAAAC,IAKAe,KAAAc,8BAAA,SAAAL,EAAAM,EAAA/B,EAAAC,GACAT,EAAA+B,IAAA,2BAAAE,EAAAM,GAAA5D,KAAA6B,EAAAC,IAMAe,KAAAgB,QAAA,SAAAC,EAAAjC,GACAR,EAAAE,IAAA,cAAAuC,GAAA9D,KAAA6B,IAIAgB,KAAAkB,QAAA,SAAAzC,EAAAO,EAAAC,GACAT,EAAAe,KAAA,aAAAd,GAAAtB,KAAA6B,EAAAC,IAIAe,KAAAmB,WAAA,SAAAF,EAAAxC,EAAAO,EAAAC,GACAT,EAAA+B,IAAA,cAAAU,EAAAxC,GAAAtB,KAAA6B,EAAAC,IAOAe,KAAAoB,YAAA,SAAAX,EAAAzB,GACAR,EAAAE,IAAA,2BAAA+B,EAAA,aAAAtD,KAAA6B,IAKAgB,KAAAqB,YAAA,SAAAZ,EAAAa,EAAAtC,EAAAC,GACAT,EAAAe,KAAA,2BAAAkB,EAAA,YAAAa,GAAAnE,KAAA6B,EAAAC,UCvFA1C,iBAAAgF,UAAA,gBAAA,WACA,OACArD,YAAA,iCACAsD,SAAA,IACAC,SAAA,KCJA,WAGAjF,QAAAC,OAAA,oBAAAuB,WAAA,uBAAA,SAAA,YAAA,UAAA,cAAA,cAAA,SAAA0D,EAAA9E,EAAA+E,EAAAC,EAAA9E,GAEA4E,EAAAG,eAAA,eACAH,EAAAI,WAAA,EAEA,IAAA3B,GAAAvD,EAAAY,OAAAuE,MAAA,KAAA,GACAC,MAAAC,EACAxE,SAAAC,IAAAyC,OAEA8B,IAAA9B,GAEAyB,EAAA1B,aAAAC,EAAA,SAAAxB,GAEA+C,EAAArB,UAAA1B,EAAAC,KAAAyB,UAGA1B,EAAAC,KAAAsD,kBAAAC,KAAA,SAAAvB,GAEA,MADAnD,SAAAC,IAAA,WACA,WAAAkD,EAAAwB,OAAA,YAAAxB,EAAAwB,OACAV,EAAAjB,mBAAAG,EAAAyB,IACAX,EAAAI,WAAA,aACArE,SAAAC,IAAA,WAGA,cAAAkD,EAAAwB,OACAV,EAAAjB,mBAAAG,EAAAyB,IACAX,EAAAI,WAAA,gBACArE,SAAAC,IAAA,eAGAgE,EAAAjB,mBAAAG,EAAAyB,IACAX,EAAAI,WAAA,aACArE,SAAAC,IAAA,cAIA,SAAA4E,GACAZ,EAAAa,OAAAD,IAIAxF,EAAAiC,gBAAA,SAAAJ,IACA,IAAAA,EAAAC,KAAAC,OAEApB,QAAAC,IAAA,YAEAgE,EAAAjD,KAAAE,EAAAC,KAAAH,KACAuD,EAAArD,EAAAC,KAAAH,KAAA4D,MAEA,SAAAG,GACAd,EAAAa,OAAAC,EAAA5D,KAAA2D,SAGAb,EAAAe,sBAAA,WACA,GAAA7B,IACAnC,KAAAuD,EACA3B,UAAAF,EACAY,QACA2B,YAAAhB,EAAArB,UAAAU,MAAA,GAAA2B,YACAC,WAAAjB,EAAArB,UAAAU,MAAA,GAAA4B,aAEAD,YAAAhB,EAAArB,UAAAU,MAAA,GAAA2B,YACAC,WAAAjB,EAAArB,UAAAU,MAAA,GAAA4B,aAEAD,YAAAhB,EAAArB,UAAAU,MAAA,GAAA2B,YACAC,WAAAjB,EAAArB,UAAAU,MAAA,GAAA4B,aAGAf,GAAAjB,oBAAAC,EAAA,SAAAjC,GACAlB,QAAAC,IAAAiB,GACA+C,EAAAd,iBAAAjC,EAAAC,KAAAgC,iBACAhE,EAAAY,KAAA,uBAAAmB,EAAAC,KAAAgC,iBAAAyB,MACA,SAAA1D,GACA+C,EAAAa,OAAA5D,EAAAC,KAAA2D,gBC5EA,WAGA/F,QAAAC,OAAA,oBAAAuB,WAAA,wBAAA,SAAA,YAAA,UAAA,cAAA,SAAA0D,EAAA9E,EAAA+E,EAAAC,GAGAA,EAAA3B,cAAA,SAAAtB,GACA+C,EAAAkB,WAAAjE,EAAAC,OAGA8C,EAAAmB,cAAA,qBCVA,WAGArG,QAAAC,OAAA,oBAAAuB,WAAA,8BAAA,SAAA,YAAA,SAAA,UAAA,cAAA,cAAA,SAAA0D,EAAA9E,EAAAC,EAAA8E,EAAAC,EAAA9E,GAEA4E,EAAAG,eAAA,eACAH,EAAAJ,WAEAxE,EAAAiC,gBAAA,SAAAJ,IACA,IAAAA,EAAAC,KAAAC,OACAjC,EAAAY,KAAA,UAEAkE,EAAAjD,KAAAE,EAAAC,KAAAH,MAEA,SAAA+D,GACAd,EAAAa,OAAAC,EAAA5D,KAAA2D,QAGA,IAAA9B,GAAA7D,EAAAY,OAAAuE,MAAA,KAAA,OAEAE,IAAAxB,GAEAmB,EAAApB,oBAAAC,EAAA,SAAA9B,GAGA,QAAAmE,GAAAC,EAAAC,GACA,MAAAD,GAAAE,UAAAD,EAAAC,WAAA,EACAF,EAAAE,UAAAD,EAAAC,UAAA,EACA,EAEA,GAAAC,GAAAvE,EAAAC,KAAAgC,iBAAAuC,SACAC,IACA,IAAAzE,EAAAC,KAAAyE,gBAAA,CACA,GAAAA,GAAA1E,EAAAC,KAAAyE,eACAD,GAAAF,EAAAI,OAAAD,GACA3B,EAAA2B,gBAAA1E,EAAAC,KAAAyE,oBAEAD,GAAAF,CAGAE,GAAAG,KAAAT,GAEApB,EAAAd,iBAAAjC,EAAAC,KAAAgC,iBACAwC,IACA1B,EAAAyB,SAAAC,IAEA,SAAAZ,GACAd,EAAAa,OAAAC,EAAA5D,OAIA8C,EAAA8B,UAAA,WAEA5B,EAAAd,8BAAAY,EAAAd,iBAAAyB,IAAAX,EAAAd,iBAAAG,MAAA,SAAApC,GACA9B,EAAA4G,UACA,SAAAjB,GACAd,EAAAa,OAAAC,EAAA5D,QAIA8C,EAAAb,wBAAA,WACA,GAAAD,IACAwB,MAAA,YAEAR,GAAAf,wBAAAJ,EAAAG,EAAA,SAAAA,GACAc,EAAAd,iBAAAA,EACAnD,QAAAC,IAAAgE,EAAAd,kBACAhE,EAAAY,KAAA,gBACA,SAAAgF,GACAd,EAAAa,OAAAC,EAAA5D,QAIA8C,EAAAL,YAAA,SAAAqC,GACAjG,QAAAC,IAAAgG,GACA9B,EAAAP,YAAAK,EAAAd,iBAAAyB,KAAAf,QAAAoC,GAAA,SAAAC,GACAjC,EAAAd,iBAAAuC,SAAAQ,EAAA/E,KACA8C,EAAAgC,eAAA,GACA7G,EAAA4G,UACA,SAAAjB,GACAd,EAAAa,OAAAC,EAAA5D,cChFA,WAGApC,QAAAC,OAAA,oBAAAuB,WAAA,mBAAA,SAAA,YAAA,cAAA,cAAA,SAAA0D,EAAA9E,EAAAgF,EAAA9E,GAEA4E,EAAAG,eAAA,cACAH,EAAAjD,QACAiD,EAAAa,UAEAb,EAAAkC,YAAA,WACAlC,EAAAa,WAGAb,EAAAxC,MAAA,WAEApC,EAAAoC,MAAAwC,EAAAjD,KAAAe,aAAAkC,EAAAjD,KAAAW,UAAAjC,KAAA,WACAP,EAAAY,KAAA,cAGAmC,MAAA,SAAA6C,GACA,MAAAA,EAAA3D,QACA6C,EAAAa,OAAAsB,KAAA,+CACAnC,EAAAjD,KAAAW,SAAA,KAEAsC,EAAAa,OAAAsB,KAAArB,EAAA5D,MACA8C,EAAAjD,KAAAW,SAAA,aCzBA,WAGA5C,QAAAC,OAAA,oBAAAuB,WAAA,oBAAA,SAAA,YAAA,cAAA,cAAA,SAAA0D,EAAA9E,EAAAgF,EAAA9E,GAEA4E,EAAAG,eAAA,cACAH,EAAAjD,QAEAiD,EAAA7B,OAAA,WAEA/C,EAAA+C,SAAA1C,KAAA,WACAP,EAAAY,KAAA,iBACAmC,MAAA,WACA+B,EAAAa,OAAA,yCCbA/F,QAAAC,OAAA,UAAAuB,WAAA,oBAAA,SAAA,cAAA,SAAA0D,EAAA5E,GACA4E,EAAAoC,aAAA,EACAhH,EAAAiC,gBAAA,SAAAJ,IACA,IAAAA,EAAAC,KAAAC,OAEApB,QAAAC,IAAA,WAEAgE,EAAAjD,KAAAE,EAAAC,KAAAH,MAEA,SAAA+D,GACAd,EAAAa,OAAAC,EAAA5D,KAAA2D,YCVA,WAGA/F,QAAAC,OAAA,oBAAAuB,WAAA,qBAAA,SAAA,YAAA,UAAA,cAAA,cAAA,SAAA0D,EAAA9E,EAAA+E,EAAAC,EAAA9E,GAEA,GAAAiH,IACAC,EAAA,WACAC,EAAA,eACAC,EAAA,uBACAC,EAAA,gBACAC,EAAA,WACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,gBAGA7C,GAAAmB,cAAA,eAEA/F,EAAAiC,gBAAA,SAAAJ,IACA,IAAAA,EAAAC,KAAAC,OAEApB,QAAAC,IAAA,YAEAgE,EAAAjD,KAAAE,EAAAC,KAAAH,KACAiD,EAAA8C,KAAAT,EAAArC,EAAAjD,KAAAgG,SAEA,SAAAjC,GACAd,EAAAa,OAAAC,EAAA5D,KAAA2D,SAGAX,EAAAlB,4BAAA,SAAA/B,GACA+C,EAAAQ,kBAAAvD,EAAAC,MACA,SAAA4D,GACAd,EAAAa,OAAAC,EAAA5D,KAAA2D,eCjCA,WAGA/F,QAAAC,OAAA,oBAAAuB,WAAA,oBAAA,SAAA,YAAA,UAAA,cAAA,cAAA,SAAA0D,EAAA9E,EAAA+E,EAAAC,EAAA9E,GAEA4E,EAAAa,UACAb,EAAAG,eAAA,cACAH,EAAAjD,QACAiD,EAAAgD,mBAAA,EAEAhD,EAAAiD,iBAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,OAAAC,WAAAC,IAAAC,KACAvD,GAAAgD,mBAAAE,EAAAE,OAAAC,WAAA9D,GAAAgE,MACAvD,EAAAjD,KAAAyG,SAAAL,GAGAnD,EAAAkC,YAAA,WACAlC,EAAAa,WAIAb,EAAA5B,SAAA,SAAArB,GACAA,EAAA0G,UAAA1G,EAAA2G,UAAA3G,EAAAe,cAAAf,EAAAW,UAAAX,EAAAyG,SACApI,EAAAgD,SAAArB,GAAAtB,KAAA,SAAAwB,GACAlB,QAAAC,IAAAiB,GACA/B,EAAAY,KAAA,cACAmC,MAAA,SAAA6C,GACAd,EAAAjD,KAAAW,SAAA,GACAsC,EAAAa,OAAAsB,KAAArB,EAAA5D,SAGA8C,EAAAjD,KAAAW,SAAA,GACAsC,EAAAa,OAAAsB,KAAA","file":"all.min.js","sourcesContent":["'use strict';\n\nvar cityChallengeApp = angular.module('cityChallengeApp', ['ngRoute', 'navbar']);\n\n// Verify logged in status on each restricted route every time when view changes\ncityChallengeApp.run([\"$rootScope\", \"$location\", \"$route\", \"authService\", function ($rootScope, $location, $route, authService) {\n    $rootScope.$on('$routeChangeStart', function (event, next) {\n        authService.getUserStatus().then(function () {\n            if (next.isLogin && !authService.isLoggedIn()) {\n                $rootScope.savedLocation = $location.url();\n                $location.path('/login');\n            } else {\n                console.log('logged in or login not required!');\n            }\n        });\n    });\n}]);","'use strict';\n\nangular.module('cityChallengeApp').config(['$locationProvider', '$routeProvider', '$httpProvider', function config($locationProvider, $routeProvider, $httpProvider) {\n\n    $routeProvider.when('/challenges/', {\n        controller: 'ChallengesController',\n        controllerAs: 'vm',\n        templateUrl: 'templates/challenge-list.template.html',\n        isLogin: false\n    }).when('/challenges/:challengeId', {\n        controller: 'ChallengeController',\n        controllerAs: 'vm',\n        templateUrl: 'templates/challenge-detail.template.html',\n        isLogin: true\n\n    }).when('/profile', {\n        controller: 'ProfileController',\n        controllerAs: 'vm',\n        templateUrl: 'templates/profile.template.html',\n        isLogin: true\n\n    }).when('/challenges/current/:currentChallengeId', {\n        controller: 'CurrentChallengeController',\n        controllerAs: 'vm',\n        templateUrl: 'templates/current-challenge.template.html',\n        isLogin: true\n\n    }).when('/login', {\n        controller: 'LoginController',\n        controllerAs: 'vm',\n        templateUrl: 'templates/login.template.html',\n        isLogin: false\n    }).when('/logout', {\n        controller: 'LogoutController',\n        controllerAs: 'vm',\n        isLogin: false\n    }).when('/signup', {\n        controller: 'SignupController',\n        controllerAs: 'vm',\n        templateUrl: 'templates/signup.template.html',\n        isLogin: false\n    }).otherwise('/challenges');\n}]);","'use strict';\n\nangular.module('navbar', []).component('navbar', {\n    templateUrl: 'templates/navbar.template.html',\n    controller: 'NavbarController'\n});","'use strict';\n\nangular.module('cityChallengeApp').factory('authService', ['$q', '$timeout', '$http', function ($q, $timeout, $http) {\n    var user = null;\n    var loggedInUser = null;\n\n    function isLoggedIn() {\n\n        if (user) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getUserStatus() {\n        return $http.get('/auth/loggedin').then(function (response) {\n            if (response.data.status === false) {\n                user = false;\n            } else {\n                user = true;\n                console.log('setting logged in user: ');\n                loggedInUser = response.data.user;\n                console.log(loggedInUser);\n            }\n        });\n    }\n\n    function getLoggedInUser(successCallback, errorCallback) {\n        $http.get('/auth/loggedin').then(successCallback, errorCallback);\n    }\n\n    function login(email, password) {\n\n        // create a new instance of deferred\n        var deferred = $q.defer();\n\n        // send a post request to the server\n        $http.post('/auth/login', { emailAddress: email, password: password })\n        // handle success, set loggedInUser and user status\n        .then(function (response) {\n            if (response.status === 200) {\n                user = true;\n                loggedInUser = response.data;\n                deferred.resolve();\n            } else {\n                user = false;\n                deferred.reject();\n            }\n        })\n        // handle error\n        .catch(function (data) {\n            user = false;\n            deferred.reject(data);\n        });\n\n        // return promise object\n        return deferred.promise;\n    }\n\n    function logout() {\n\n        // create a new instance of deferred\n        var deferred = $q.defer();\n\n        // send a get request to the server\n        $http.get('/auth/logout')\n        // handle success, set user and loggedInUser to false\n        .then(function () {\n            user = false;\n            loggedInUser = null;\n            deferred.resolve();\n        })\n        // handle error\n        .catch(function () {\n            user = false;\n            deferred.reject();\n        });\n\n        // return promise object\n        return deferred.promise;\n    }\n\n    function register(user) {\n\n        // create a new instance of deferred\n        var deferred = $q.defer();\n\n        // send a post request to the server\n        $http.post('/auth/signup', user)\n        // handle success, set loggedInUser and user status\n        .then(function (response) {\n            if (response.status === 200 && response) {\n                loggedInUser = response.data;\n                deferred.resolve();\n            } else {\n                deferred.reject();\n            }\n        })\n        // handle error\n        .catch(function (data) {\n            deferred.reject(data);\n        });\n\n        // return promise object\n        return deferred.promise;\n    }\n\n    return {\n        isLoggedIn: isLoggedIn,\n        getUserStatus: getUserStatus,\n        login: login,\n        logout: logout,\n        register: register,\n        getLoggedInUser: getLoggedInUser\n    };\n}]);","'use strict';\n\n(function () {\n\n    'use strict';\n\n    angular.module('cityChallengeApp').service('dataService', [\"$http\", function ($http) {\n\n        // CHALLENGES\n\n        //GET /challenges - Gets all of the challenges.\n        this.getChallenges = function (successCallback) {\n            $http.get('/api/challenges').then(successCallback);\n        };\n\n        //GET /challenge/:id - Gets a challenge.\n        this.getChallenge = function (challengeId, successCallback) {\n            $http.get('/api/challenges/' + challengeId).then(successCallback);\n        };\n\n        // POST /challenges/ create a new challenge\n        this.addChallenge = function (challenge, successCallback, errorCallback) {\n            $http.post('/api/challenges', challenge).then(successCallback, errorCallback);\n        };\n\n        // PUT update a challenge (likes, difficulty, fun, times_taken) - TODO: change challenge object on front-end side\n        this.updateChallenge = function (challengeId, challenge, successCallback, errorCallback) {\n            $http.put('/api/challenges/' + challengeId, challenge).then(successCallback, errorCallback);\n        };\n\n        /* CURRENT CHALLENGES */\n\n        // GET a single currentChallenge\n        this.getCurrentChallenge = function (currentChallengeId, successCallback, errorCallback) {\n            $http.get('/api/current/challenges/' + currentChallengeId).then(successCallback, errorCallback);\n        };\n\n        // GET all currentChallenges for user\n        // returns an array of currentChallenges objects\n        this.getCurrentChallengesForUser = function (successCallback, errorCallback) {\n            $http.get('/api/current/user/challenges/').then(successCallback, errorCallback);\n        };\n\n        // POST create a new current challenge AND check for matching challenge\n        // returns currentChallenges = [firstChallenge, secondChallenge] IF matches were found OR just saved: true\n        this.addCurrentChallenge = function (currentChallenge, successCallback, errorCallback) {\n            $http.post('/api/current/challenges/', currentChallenge).then(successCallback, errorCallback);\n        };\n\n        // PUT update a current challenge - abandon\n        // returns updated currentChallenge\n        this.abandonCurrentChallenge = function (currentChallengeId, currentChallenge, successCallback, errorCallback) {\n            $http.put('/api/current/challenges/' + currentChallengeId + '/abandon', currentChallenge).then(successCallback, errorCallback);\n        };\n\n        // PUT update a current challenge - step completed\n        // returns updated currentChallenge\n        this.stepCompletedCurrentChallenge = function (currentChallengeId, steps, successCallback, errorCallback) {\n            $http.put('/api/current/challenges/' + currentChallengeId, steps).then(successCallback, errorCallback);\n        };\n\n        // USERS\n\n        // GET /user\n        this.getUser = function (id, successCallback) {\n            $http.get('/api/users/' + id).then(successCallback);\n        };\n\n        // POST - create a single user\n        this.addUser = function (user, successCallback, errorCallback) {\n            $http.post('/api/users', user).then(successCallback, errorCallback);\n        };\n\n        // PUT - update a single user\n        this.updateUser = function (id, user, successCallback, errorCallback) {\n            $http.put('/api/users/' + id, user).then(successCallback, errorCallback);\n        };\n\n        // MESSAGES\n\n        // GET messages for currentChallenge\n        // returns an array of messages\n        this.getMessages = function (currentChallengeId, successCallback) {\n            $http.get('/api/current/challenges/' + currentChallengeId + '/messages').then(successCallback);\n        };\n\n        // POST new text for currentChallenge\n        // returns an array of updated messages\n        this.sendMessage = function (currentChallengeId, message, successCallback, errorCallback) {\n            $http.post('/api/current/challenges/' + currentChallengeId + '/messages', message).then(successCallback, errorCallback);\n        };\n    }]);\n})();","'use strict';\n\ncityChallengeApp.directive('footerElement', function () {\n     return {\n          templateUrl: 'templates/footer.template.html',\n          restrict: 'E',\n          replace: true\n     };\n});","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('ChallengeController', ['$scope', '$location', '$filter', 'dataService', 'authService', function ($scope, $location, $filter, dataService, authService) {\n\n        $scope.pageIdentifier = 'landing-page';\n        $scope.buttonFlag = '';\n\n        var challengeId = $location.path().split('/')[2];\n        var userId = undefined;\n        console.log(challengeId);\n\n        if (challengeId != undefined) {\n            //get challenge and matching currentChallenges\n            dataService.getChallenge(challengeId, function (response) {\n\n                $scope.challenge = response.data.challenge;\n                // check status of matching currentChallenges\n\n                response.data.currentChallenges.some(function (currentChallenge) {\n                    console.log('in some');\n                    if (currentChallenge.state === 'active' || currentChallenge.state === 'waiting') {\n                        $scope.currentChallengeId = currentChallenge._id;\n                        $scope.buttonFlag = 'active';\n                        console.log('active');\n\n                        return;\n                    } else if (currentChallenge.state === 'completed') {\n                        $scope.currentChallengeId = currentChallenge._id;\n                        $scope.buttonFlag = 'completed';\n                        console.log('completed');\n                        return;\n                    } else {\n                        $scope.currentChallengeId = currentChallenge._id;\n                        $scope.buttonFlag = 'failed';\n                        console.log('failed');\n                        return;\n                    }\n                });\n            }, function (err) {\n                $scope.errors = err;\n            });\n        }\n        // get user\n        authService.getLoggedInUser(function (response) {\n            if (response.data.status === false) {\n                // redirect to login page\n                console.log('shiiiit');\n            } else {\n                $scope.user = response.data.user;\n                userId = response.data.user._id;\n            }\n        }, function (error) {\n            $scope.errors = error.data.errors;\n        });\n\n        $scope.startCurrentChallenge = function () {\n            var currentChallenge = {\n                \"user\": userId,\n                \"challenge\": challengeId,\n                \"steps\": [{\n                    \"description\": $scope.challenge.steps[0].description,\n                    \"stepNumber\": $scope.challenge.steps[0].stepNumber\n                }, {\n                    \"description\": $scope.challenge.steps[1].description,\n                    \"stepNumber\": $scope.challenge.steps[1].stepNumber\n                }, {\n                    \"description\": $scope.challenge.steps[2].description,\n                    \"stepNumber\": $scope.challenge.steps[2].stepNumber\n                }]\n            };\n            dataService.addCurrentChallenge(currentChallenge, function (response) {\n                console.log(response);\n                $scope.currentChallenge = response.data.currentChallenge;\n                $location.path(\"/challenges/current/\" + response.data.currentChallenge._id);\n            }, function (response) {\n                $scope.errors = response.data.errors;\n            });\n        };\n    }]);\n})();","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('ChallengesController', ['$scope', '$location', '$filter', 'dataService', function ($scope, $location, $filter, dataService) {\n\n        // get all challenges\n        dataService.getChallenges(function (response) {\n            $scope.challenges = response.data;\n        });\n\n        $scope.pageIndicator = 'landing-page';\n    }]);\n})();","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('CurrentChallengeController', ['$scope', '$location', '$route', '$filter', 'dataService', 'authService', function ($scope, $location, $route, $filter, dataService, authService) {\n\n        $scope.pageIdentifier = 'landing-page';\n        $scope.message = {};\n\n        authService.getLoggedInUser(function (response) {\n            if (response.data.status === false) {\n                $location.path(\"/login\");\n            } else {\n                $scope.user = response.data.user;\n            }\n        }, function (error) {\n            $scope.errors = error.data.errors;\n        });\n\n        var currentChallengeId = $location.path().split('/')[3];\n\n        if (currentChallengeId != undefined) {\n            //get challenge\n            dataService.getCurrentChallenge(currentChallengeId, function (response) {\n\n                // helper function to sort messages by date\n                function compare(a, b) {\n                    if (a.createdAt < b.createdAt) return -1;\n                    if (a.createdAt > b.createdAt) return 1;\n                    return 0;\n                }\n                var userMessages = response.data.currentChallenge.messages;\n                var allMessages = [];\n                if (response.data.partnerMessages) {\n                    var partnerMessages = response.data.partnerMessages;\n                    allMessages = userMessages.concat(partnerMessages);\n                    $scope.partnerMessages = response.data.partnerMessages;\n                } else {\n                    allMessages = userMessages;\n                }\n\n                allMessages.sort(compare);\n\n                $scope.currentChallenge = response.data.currentChallenge;\n                if (allMessages) {\n                    $scope.messages = allMessages;\n                }\n            }, function (error) {\n                $scope.errors = error.data;\n            });\n        }\n\n        $scope.saveSteps = function () {\n\n            dataService.stepCompletedCurrentChallenge($scope.currentChallenge._id, $scope.currentChallenge.steps, function (response) {\n                $route.reload();\n            }, function (error) {\n                $scope.errors = error.data;\n            });\n        };\n\n        $scope.abandonCurrentChallenge = function () {\n            var currentChallenge = {\n                \"state\": 'abandoned'\n            };\n            dataService.abandonCurrentChallenge(currentChallengeId, currentChallenge, function (currentChallenge) {\n                $scope.currentChallenge = currentChallenge;\n                console.log($scope.currentChallenge);\n                $location.path(\"/challenges\");\n            }, function (error) {\n                $scope.errors = error.data;\n            });\n        };\n\n        $scope.sendMessage = function (newMessageText) {\n            console.log(newMessageText);\n            dataService.sendMessage($scope.currentChallenge._id, { \"message\": newMessageText }, function (currentChallengeMessages) {\n                $scope.currentChallenge.messages = currentChallengeMessages.data;\n                $scope.newMessageText = '';\n                $route.reload();\n            }, function (error) {\n                $scope.errors = error.data;\n            });\n        };\n    }]);\n})();","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('LoginController', ['$scope', '$location', 'dataService', 'authService', function ($scope, $location, dataService, authService) {\n\n        $scope.pageIdentifier = 'signup-page';\n        $scope.user = {};\n        $scope.errors = [];\n\n        $scope.removeError = function () {\n            $scope.errors = [];\n        };\n\n        $scope.login = function () {\n\n            authService.login($scope.user.emailAddress, $scope.user.password).then(function () {\n                $location.path('/profile');\n                //$scope.disabled = false;\n                //$scope.loginForm= {};\n            }).catch(function (error) {\n                if (error.status === 401) {\n                    $scope.errors.push('Email already registered or wrong password.');\n                    $scope.user.password = '';\n                } else {\n                    $scope.errors.push(error.data);\n                    $scope.user.password = '';\n                }\n            });\n        };\n    }]);\n})();","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('LogoutController', ['$scope', '$location', 'dataService', 'authService', function ($scope, $location, dataService, authService) {\n\n        $scope.pageIdentifier = 'signup-page';\n        $scope.user = {};\n\n        $scope.logout = function () {\n\n            authService.logout().then(function () {\n                $location.path('/challenges');\n            }).catch(function () {\n                $scope.errors = 'Could not log out. Bizarre...';\n            });\n        };\n    }]);\n})();","'use strict';\n\nangular.module('navbar').controller('NavbarController', ['$scope', 'authService', function ($scope, authService) {\n    $scope.isCollapsed = true;\n    authService.getLoggedInUser(function (response) {\n        if (response.data.status === false) {\n            // redirect to login page\n            console.log('shiiiit');\n        } else {\n            $scope.user = response.data.user;\n        }\n    }, function (error) {\n        $scope.errors = error.data.errors;\n    });\n}]);","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('ProfileController', ['$scope', '$location', '$filter', 'dataService', 'authService', function ($scope, $location, $filter, dataService, authService) {\n\n        var ranks = {\n            1: 'Initiate',\n            2: 'Deep Dreamer',\n            3: 'Waking Consciousness',\n            4: 'Inner Silence',\n            5: 'Awakened',\n            6: 'Funny Pigeon',\n            7: 'Bearer of Light',\n            8: 'Eternal Space'\n        };\n\n        $scope.pageIndicator = 'profile-page';\n\n        authService.getLoggedInUser(function (response) {\n            if (response.data.status === false) {\n                // redirect to login page\n                console.log('shiiiit');\n            } else {\n                $scope.user = response.data.user;\n                $scope.rank = ranks[$scope.user.level];\n            }\n        }, function (error) {\n            $scope.errors = error.data.errors;\n        });\n\n        dataService.getCurrentChallengesForUser(function (response) {\n            $scope.currentChallenges = response.data;\n        }, function (error) {\n            $scope.errors = error.data.errors;\n        });\n    }]);\n})();","'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('cityChallengeApp').controller('SignupController', ['$scope', '$location', '$filter', 'dataService', 'authService', function ($scope, $location, $filter, dataService, authService) {\n\n        $scope.errors = [];\n        $scope.pageIdentifier = 'signup-page';\n        $scope.user = {};\n        $scope.selectedProfilePic = 0;\n\n        $scope.chooseProfilePic = function (clickedItem) {\n            var profilePicUrl = clickedItem.target.attributes.src.value;\n            $scope.selectedProfilePic = clickedItem.target.attributes.id.value;\n            $scope.user.photoUrl = profilePicUrl;\n        };\n\n        $scope.removeError = function () {\n            $scope.errors = [];\n        };\n\n        // get all challenges\n        $scope.register = function (user) {\n            if (user.fullName && user.userName && user.emailAddress && user.password && user.photoUrl) {\n                authService.register(user).then(function (response) {\n                    console.log(response);\n                    $location.path('/profile');\n                }).catch(function (error) {\n                    $scope.user.password = '';\n                    $scope.errors.push(error.data);\n                });\n            } else {\n                $scope.user.password = '';\n                $scope.errors.push('Fill in all fields and choose a profile pic.');\n            }\n        };\n    }]);\n})();"]}